########################################
# Frontend (Next.js) public environment
########################################
# Choose ONE backend target for the frontend:
# - Local backend (Docker Compose) → use http://localhost:5000
# - Remote dev/prod backend        → uncomment one of the presets below
#
# If you use a remote backend, you do NOT need any Backend/MinIO vars below.
# If you run the local backend, keep the localhost value and use Backend/MinIO.

# Local backend (default for local development):
NEXT_PUBLIC_API_BASE_URL=http://localhost:5000

# Remote backends (uncomment ONE if desired). If you set this and not BASE_URL,
# the backend will use this value as BASE_URL automatically.
# NEXT_PUBLIC_API_BASE_URL=https://mol-view-stories-dev.dyn.cloud.e-infra.cz   # Dev API
# NEXT_PUBLIC_API_BASE_URL=https://stories.molstar.org                         # Prod API

# OAuth (Life Science AAI)
# NOTE: Required by the frontend according to src/lib/env-config.ts
NEXT_PUBLIC_OIDC_AUTHORITY=https://login.aai.lifescience-ri.eu/oidc
NEXT_PUBLIC_OIDC_CLIENT_ID=3963b643-f862-4578-868e-3ba3de08dd2d


#############################
# Backend (Flask API) config
# Only needed when you run the local backend with Docker Compose
#############################

# Where the API says its public base is (affects public URLs it returns)
# If BASE_URL is not set, the API will fall back to NEXT_PUBLIC_API_BASE_URL.
# For local dev with Docker Compose, keep localhost:
BASE_URL=http://localhost:5000

# CORS frontend origin (used by api/config.py)
FRONTEND_URL=http://localhost:3000

# OIDC userinfo endpoint used by the API to validate bearer tokens
OIDC_USERINFO_URL=https://login.aai.lifescience-ri.eu/oidc/userinfo

# API limits
MAX_SESSIONS_PER_USER=100
MAX_STORIES_PER_USER=100
MAX_UPLOAD_SIZE_MB=50


#############################
# Storage (MinIO/S3) config
# Only needed when you run the local backend with Docker Compose
#############################
# For local development, we will run MinIO via docker-compose on 9000/9001
# MINIO_ENDPOINT can include scheme or not; client normalizes it.
MINIO_ENDPOINT=http://minio:9000
MINIO_BUCKET=root
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin

# Allow HTTP for local dev (client reads MINIO_SECURE=false to use http)
MINIO_SECURE=false


