// Automatically generated file. Do not edit manually.
// This file is generated by npm run mvs-types

export const MVSTypes = `
/**
 * @since 2.11.0
 */

/**
 * @since 2.11.0
 */
interface Predicate<A> {
  (a: A): boolean
}
/**
 * @category type lambdas
 * @since 2.11.0
 */
declare const URI$8 = 'Predicate'
/**
 * @category type lambdas
 * @since 2.11.0
 */
type URI$8 = typeof URI$8
declare module './HKT' {
  interface URItoKind<A> {
    readonly [URI$8]: Predicate<A>
  }
}

/**
 * A \`Separated\` type which holds \`left\` and \`right\` parts.
 *
 * @category model
 * @since 2.10.0
 */
interface Separated<E, A> {
  readonly left: E
  readonly right: A
}
/**
 * @category type lambdas
 * @since 2.10.0
 */
declare const URI$7 = 'Separated'
/**
 * @category type lambdas
 * @since 2.10.0
 */
type URI$7 = typeof URI$7
declare module './HKT' {
  interface URItoKind2<E, A> {
    readonly [URI$7]: Separated<E, A>
  }
}

/**
 * @category model
 * @since 2.5.0
 */
type ReadonlyNonEmptyArray<A> = ReadonlyArray<A> & {
  readonly 0: A
}
/**
 * @category type lambdas
 * @since 2.5.0
 */
declare const URI$6 = 'ReadonlyNonEmptyArray'
/**
 * @category type lambdas
 * @since 2.5.0
 */
type URI$6 = typeof URI$6
declare module './HKT' {
  interface URItoKind<A> {
    readonly [URI$6]: ReadonlyNonEmptyArray<A>
  }
}

/**
 * @category model
 * @since 2.0.0
 */
interface None {
  readonly _tag: 'None'
}
/**
 * @category model
 * @since 2.0.0
 */
interface Some<A> {
  readonly _tag: 'Some'
  readonly value: A
}
/**
 * @category model
 * @since 2.0.0
 */
type Option<A> = None | Some<A>
/**
 * @category type lambdas
 * @since 2.0.0
 */
declare const URI$5 = 'Option'
/**
 * @category type lambdas
 * @since 2.0.0
 */
type URI$5 = typeof URI$5
declare module './HKT' {
  interface URItoKind<A> {
    readonly [URI$5]: Option<A>
  }
}

/**
 * The \`ReadonlyRecord.ts\` module enables dealing in a functional way with
 * Typescript's \`Readonly<Record<K, T>>\` type. That is similar to the
 * \`Record.ts\` module, but for a record with all properties
 * declared as \`readonly\`.
 *
 * @since 2.5.0
 */

/**
 * @category model
 * @since 2.5.0
 */
type ReadonlyRecord<K extends string, T> = Readonly<Record<K, T>>
/**
 * @category type lambdas
 * @since 2.5.0
 */
declare const URI$4 = 'ReadonlyRecord'
/**
 * @category type lambdas
 * @since 2.5.0
 */
type URI$4 = typeof URI$4
declare module './HKT' {
  interface URItoKind<A> {
    readonly [URI$4]: ReadonlyRecord<string, A>
  }
}

/**
 * @since 2.11.0
 */

/**
 * @since 2.11.0
 */
interface Endomorphism<A> {
  (a: A): A
}
/**
 * @category type lambdas
 * @since 2.11.0
 */
declare const URI$3 = 'Endomorphism'
/**
 * @category type lambdas
 * @since 2.11.0
 */
type URI$3 = typeof URI$3
declare module './HKT' {
  interface URItoKind<A> {
    readonly [URI$3]: Endomorphism<A>
  }
}

/**
 * The \`Eq\` type class represents types which support decidable equality.
 *
 * Instances must satisfy the following laws:
 *
 * 1. Reflexivity: \`E.equals(a, a) === true\`
 * 2. Symmetry: \`E.equals(a, b) === E.equals(b, a)\`
 * 3. Transitivity: if \`E.equals(a, b) === true\` and \`E.equals(b, c) === true\`, then \`E.equals(a, c) === true\`
 *
 * @since 2.0.0
 */

/**
 * @category model
 * @since 2.0.0
 */
interface Eq<A> {
  readonly equals: (x: A, y: A) => boolean
}
/**
 * @category type lambdas
 * @since 2.0.0
 */
declare const URI$2 = 'Eq'
/**
 * @category type lambdas
 * @since 2.0.0
 */
type URI$2 = typeof URI$2
declare module './HKT' {
  interface URItoKind<A> {
    readonly [URI$2]: Eq<A>
  }
}

/**
 * @since 2.0.0
 */

/**
 * @category model
 * @since 2.0.0
 */
type Ordering = -1 | 0 | 1

/**
 * The \`Ord\` type class represents types which support comparisons with a _total order_.
 *
 * Instances should satisfy the laws of total orderings:
 *
 * 1. Reflexivity: \`S.compare(a, a) <= 0\`
 * 2. Antisymmetry: if \`S.compare(a, b) <= 0\` and \`S.compare(b, a) <= 0\` then \`a <-> b\`
 * 3. Transitivity: if \`S.compare(a, b) <= 0\` and \`S.compare(b, c) <= 0\` then \`S.compare(a, c) <= 0\`
 *
 * @since 2.0.0
 */

/**
 * @category model
 * @since 2.0.0
 */
interface Ord<A> extends Eq<A> {
  readonly compare: (first: A, second: A) => Ordering
}
/**
 * @category type lambdas
 * @since 2.0.0
 */
declare const URI$1 = 'Ord'
/**
 * @category type lambdas
 * @since 2.0.0
 */
type URI$1 = typeof URI$1
declare module './HKT' {
  interface URItoKind<A> {
    readonly [URI$1]: Ord<A>
  }
}

/**
 * @category model
 * @since 2.0.0
 */
interface Left<E> {
  readonly _tag: 'Left'
  readonly left: E
}
/**
 * @category model
 * @since 2.0.0
 */
interface Right<A> {
  readonly _tag: 'Right'
  readonly right: A
}
/**
 * @category model
 * @since 2.0.0
 */
type Either<E, A> = Left<E> | Right<A>
/**
 * @category type lambdas
 * @since 2.0.0
 */
declare const URI = 'Either'
/**
 * @category type lambdas
 * @since 2.0.0
 */
type URI = typeof URI
declare module './HKT' {
  interface URItoKind2<E, A> {
    readonly [URI]: Either<E, A>
  }
}

/**
 * @since 1.0.0
 */

/**
 * @category Decode error
 * @since 1.0.0
 */
interface ContextEntry {
  readonly key: string
  readonly type: Decoder<any, any>
  /** the input data */
  readonly actual?: unknown
}
/**
 * @category Decode error
 * @since 1.0.0
 */
interface Context extends ReadonlyArray<ContextEntry> {}
/**
 * @category Decode error
 * @since 1.0.0
 */
interface ValidationError {
  /** the offending (sub)value */
  readonly value: unknown
  /** where the error originated */
  readonly context: Context
  /** optional custom error message */
  readonly message?: string
}
/**
 * @category Decode error
 * @since 1.0.0
 */
interface Errors extends Array<ValidationError> {}
/**
 * @category Decode error
 * @since 1.0.0
 */
type Validation<A> = Either<Errors, A>
/**
 * @since 1.0.0
 */
type Is<A> = (u: unknown) => u is A
/**
 * @since 1.0.0
 */
type Validate<I, A> = (i: I, context: Context) => Validation<A>
/**
 * @since 1.0.0
 */
type Decode<I, A> = (i: I) => Validation<A>
/**
 * @since 1.0.0
 */
type Encode<A, O> = (a: A) => O
/**
 * @since 1.0.0
 */
interface Any extends Type<any, any, any> {}
/**
 * @category Codec
 * @since 1.0.0
 */
type TypeOf<C extends Any> = C['_A']
/**
 * @category Codec
 * @since 1.0.0
 */
interface Decoder<I, A> {
  readonly name: string
  readonly validate: Validate<I, A>
  readonly decode: Decode<I, A>
}
/**
 * @category Codec
 * @since 1.0.0
 */
interface Encoder<A, O> {
  readonly encode: Encode<A, O>
}
/**
 * @category Codec
 * @since 1.0.0
 */
declare class Type<A, O = A, I = unknown> implements Decoder<I, A>, Encoder<A, O> {
  /** a unique name for this codec */
  readonly name: string
  /** a custom type guard */
  readonly is: Is<A>
  /** succeeds if a value of type I can be decoded to a value of type A */
  readonly validate: Validate<I, A>
  /** converts a value of type A to a value of type O */
  readonly encode: Encode<A, O>
  /**
   * @since 1.0.0
   */
  readonly _A: A
  /**
   * @since 1.0.0
   */
  readonly _O: O
  /**
   * @since 1.0.0
   */
  readonly _I: I
  constructor(
    /** a unique name for this codec */
    name: string,
    /** a custom type guard */
    is: Is<A>,
    /** succeeds if a value of type I can be decoded to a value of type A */
    validate: Validate<I, A>,
    /** converts a value of type A to a value of type O */
    encode: Encode<A, O>
  )
  /**
   * @since 1.0.0
   */
  pipe<B, IB, A extends IB, OB extends A>(this: Type<A, O, I>, ab: Type<B, OB, IB>, name?: string): Type<B, O, I>
  /**
   * @since 1.0.0
   */
  asDecoder(): Decoder<I, A>
  /**
   * @since 1.0.0
   */
  asEncoder(): Encoder<A, O>
  /**
   * a version of \`validate\` with a default context
   * @since 1.0.0
   */
  decode(i: I): Validation<A>
}

/**
 * Copyright (c) 2023-2025 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Adam Midlik <midlik@gmail.com>
 * @author David Sehnal <david.sehnal@gmail.com>
 */

/** All types that can be used in tree node params.
 * Can be extended, this is just to list them all in one place and possibly catch some typing errors */
type AllowedValueTypes = string | number | boolean | null | [number, number, number] | string[] | number[] | {};
interface FieldBase<V extends AllowedValueTypes = any, R extends boolean = boolean> {
    /** Definition of allowed types for the field */
    type: Type<V>;
    /** If \`required===true\`, the value must always be defined in molviewspec format (can be \`null\` if \`type\` allows it).
     * If \`required===false\`, the value can be ommitted (meaning that a default should be used).
     * If \`type\` allows \`null\`, the default must be \`null\`. */
    required: R;
    /** Description of what the field value means */
    description: string;
}
/** Schema for param field which must always be provided (has no default value) */
interface RequiredField<V extends AllowedValueTypes = any> extends FieldBase<V> {
    required: true;
}
declare function RequiredField<V extends AllowedValueTypes>(type: Type<V>, description: string): RequiredField<V>;
/** Schema for param field which can be dropped (meaning that a default value will be used) */
interface OptionalField<V extends AllowedValueTypes = any> extends FieldBase<V> {
    required: false;
    /** Default value for optional field.
     * If field type allows \`null\`, default must be \`null\` (this is to avoid issues in languages that do not distinguish \`null\` and \`undefined\`). */
    default: DefaultValue<V>;
}
declare function OptionalField<V extends AllowedValueTypes>(type: Type<V>, defaultValue: DefaultValue<V>, description: string): OptionalField<V>;
/** Schema for one field in params (i.e. a value in a top-level key-value pair) */
type Field<V extends AllowedValueTypes = any> = RequiredField<V> | OptionalField<V>;
/** Type of valid default value for value type \`V\` (if the type allows \`null\`, the default must be \`null\`) */
type DefaultValue<V extends AllowedValueTypes> = null extends V ? null : V;
/** Type of valid value for field of type \`F\` (never includes \`undefined\`, even if field is optional) */
type ValueFor<F extends Field | Any> = F extends Field<infer V> ? V : F extends Any ? TypeOf<F> : never;

/**
 * Copyright (c) 2023-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Adam Midlik <midlik@gmail.com>
 * @author David Sehnal <david.sehnal@gmail.com>
 */

type Fields = {
    [key in string]: Field;
};
/** Type of \`ParamsSchema\` where all fields are completely independent */
interface SimpleParamsSchema<TFields extends Fields = Fields> {
    type: 'simple';
    /** Parameter fields */
    fields: TFields;
}
declare function SimpleParamsSchema<TFields extends Fields>(fields: TFields): SimpleParamsSchema<TFields>;
type ValuesForFields<F extends Fields> = {
    [key in keyof F as (F[key] extends RequiredField<any> ? key : never)]: ValueFor<F[key]>;
} & {
    [key in keyof F as (F[key] extends OptionalField<any> ? key : never)]?: ValueFor<F[key]>;
};
type ValuesForSimpleParamsSchema<TSchema extends SimpleParamsSchema> = ValuesForFields<TSchema['fields']>;
type Cases = {
    [case_ in string]: SimpleParamsSchema;
};
/** Type of \`ParamsSchema\` where one field (discriminator) determines what other fields are allowed (i.e. discriminated union type) */
interface UnionParamsSchema<TDiscriminator extends string = string, TCases extends Cases = Cases> {
    type: 'union';
    /** Name of parameter field that determines the rest (allowed values are defined by keys of \`cases\`) */
    discriminator: TDiscriminator;
    /** Description for the discriminator parameter field */
    discriminatorDescription: string;
    /** \`ParamsSchema\` for the rest, for each case of discriminator value */
    cases: TCases;
}
declare function UnionParamsSchema<TDiscriminator extends string, TCases extends Cases>(discriminator: TDiscriminator, discriminatorDescription: string, cases: TCases): UnionParamsSchema<TDiscriminator, TCases>;
type ValuesForUnionParamsSchema<TSchema extends UnionParamsSchema, TCase extends keyof TSchema['cases'] = keyof TSchema['cases']> = TCase extends keyof TSchema['cases'] ? {
    [discriminator in TSchema['discriminator']]: TCase;
} & ValuesFor<TSchema['cases'][TCase]> : never;
/** Schema for "params", i.e. a flat collection of key-value pairs */
type ParamsSchema = SimpleParamsSchema | UnionParamsSchema;
/** Type of values for a params schema (optional fields can be missing) */
type ValuesFor<P extends ParamsSchema> = P extends SimpleParamsSchema ? ValuesForSimpleParamsSchema<P> : P extends UnionParamsSchema ? ValuesForUnionParamsSchema<P> : never;

/**
 * Copyright (c) 2023-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Adam Midlik <midlik@gmail.com>
 */

/** Type of "custom" of a tree node (key-value storage with arbitrary JSONable values) */
type CustomProps = Partial<Record<string, any>>;
/** Tree node without children */
type Node<TKind extends string = string, TParams extends {} = {}> = {} extends TParams ? {
    kind: TKind;
    params?: TParams;
    custom?: CustomProps;
    ref?: string;
} : {
    kind: TKind;
    params: TParams;
    custom?: CustomProps;
    ref?: string;
};
/** Kind type for a tree node */
type Kind<TNode extends Node> = TNode['kind'];
/** Tree (i.e. a node with optional children) where the root node is of type \`TRoot\` and other nodes are of type \`TNode\` */
type Tree<TNode extends Node<string, {}> = Node<string, {}>, TRoot extends TNode = TNode> = TRoot & {
    children?: Tree<TNode, TNode>[];
};
/** Type of any subtree that can occur within given \`TTree\` tree type */
type Subtree<TTree extends Tree> = NonNullable<TTree['children']>[number];
/** Type of any subtree that can occur within given \`TTree\` tree type and has kind type \`TKind\` */
type SubtreeOfKind<TTree extends Tree, TKind extends Kind<Subtree<TTree>> = Kind<Subtree<TTree>>> = RootOfKind<Subtree<TTree>, TKind>;
type RootOfKind<TTree extends Tree, TKind extends Kind<TTree>> = Extract<TTree, Tree<any, Node<TKind>>>;
/** Params type for a given kind type within a tree */
type ParamsOfKind<TTree extends Tree, TKind extends Kind<Subtree<TTree>> = Kind<Subtree<TTree>>> = NonNullable<SubtreeOfKind<TTree, TKind>['params']>;
type ParamsSchemas = {
    [kind: string]: ParamsSchema;
};
/** Definition of tree type, specifying allowed node kinds, types of their params, required kind for the root, and allowed parent-child kind combinations */
interface TreeSchema<TParamsSchemas extends ParamsSchemas = ParamsSchemas, TRootKind extends keyof TParamsSchemas = string> {
    /** Required kind of the root node */
    rootKind: TRootKind;
    /** Definition of allowed node kinds */
    nodes: {
        [kind in keyof TParamsSchemas]: {
            /** Params schema for this node kind */
            params: TParamsSchemas[kind];
            /** Documentation for this node kind */
            description?: string;
            /** Node kinds that can serve as parent for this node kind (\`undefined\` means the parent can be of any kind) */
            parent?: (string & keyof TParamsSchemas)[];
        };
    };
}
declare function TreeSchema<P extends ParamsSchemas = ParamsSchemas, R extends keyof P = string>(schema: TreeSchema<P, R>): TreeSchema<P, R>;
/** ParamsSchemas per node kind */
type ParamsSchemasOf<TTreeSchema extends TreeSchema> = TTreeSchema extends TreeSchema<infer TParamsSchema, any> ? TParamsSchema : never;
/** Type of tree node which can occur as the root of a tree conforming to tree schema \`TTreeSchema\` */
type RootFor<TTreeSchema extends TreeSchema> = NodeFor<TTreeSchema, TTreeSchema['rootKind']>;
/** Type of tree node which can occur anywhere in a tree conforming to tree schema \`TTreeSchema\`,
 * optionally narrowing down to a given node kind */
type NodeFor<TTreeSchema extends TreeSchema, TKind extends keyof ParamsSchemasOf<TTreeSchema> = keyof ParamsSchemasOf<TTreeSchema>> = {
    [key in keyof ParamsSchemasOf<TTreeSchema>]: Node<key & string, ValuesFor<ParamsSchemasOf<TTreeSchema>[key]>>;
}[TKind];
/** Type of tree which conforms to tree schema \`TTreeSchema\` */
type TreeFor<TTreeSchema extends TreeSchema> = Tree<NodeFor<TTreeSchema>, RootFor<TTreeSchema> & NodeFor<TTreeSchema>>;

/** Schema for \`MVSTree\` (MolViewSpec tree) */
declare const MVSTreeSchema: TreeSchema<{
    root: SimpleParamsSchema<{}>;
    download: SimpleParamsSchema<{
        /** URL of the data resource. */
        url: RequiredField<string>;
    }>;
    parse: SimpleParamsSchema<{
        /** Format of the input data resource. */
        format: RequiredField<"map" | "pdb" | "bcif" | "mmcif">;
    }>;
    structure: SimpleParamsSchema<{
        /** Type of structure to be created (\`"model"\` for original model coordinates, \`"assembly"\` for assembly structure, \`"symmetry"\` for a set of crystal unit cells based on Miller indices, \`"symmetry_mates"\` for a set of asymmetric units within a radius from the original model). */
        type: RequiredField<"assembly" | "symmetry" | "model" | "symmetry_mates">;
        /** Header of the CIF block to read coordinates from (only applies when the input data are from CIF or BinaryCIF). If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read coordinates from (only applies when the input data are from CIF or BinaryCIF and \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** 0-based index of model in case the input data contain multiple models. */
        model_index: OptionalField<number>;
        /** Assembly identifier (only applies when \`kind\` is \`"assembly"\`). If \`null\`, the first assembly is selected. */
        assembly_id: OptionalField<string | null>;
        /** Distance (in Angstroms) from the original model in which asymmetric units should be included (only applies when \`kind\` is \`"symmetry_mates"\`). */
        radius: OptionalField<number>;
        /** Miller indices of the bottom-left unit cell to be included (only applies when \`kind\` is \`"symmetry"\`). */
        ijk_min: OptionalField<[number, number, number]>;
        /** Miller indices of the top-right unit cell to be included (only applies when \`kind\` is \`"symmetry"\`). */
        ijk_max: OptionalField<[number, number, number]>;
    }>;
    transform: SimpleParamsSchema<{
        /** Rotation matrix (3x3 matrix flattened in column major format (j*3+i indexing), this is equivalent to Fortran-order in numpy). This matrix will multiply the structure coordinates from the left. The default value is the identity matrix (corresponds to no rotation). */
        rotation: OptionalField<number[]>;
        /** Translation vector, applied to the structure coordinates after rotation. The default value is the zero vector (corresponds to no translation). */
        translation: OptionalField<[number, number, number]>;
        /** Transform matrix (4x4 matrix flattened in column major format (j*4+i indexing), this is equivalent to Fortran-order in numpy). This matrix will multiply the structure coordinates from the left. Takes precedence over \`rotation\` and \`translation\`. */
        matrix: OptionalField<number[] | null>;
    }>;
    instance: SimpleParamsSchema<{
        /** Rotation matrix (3x3 matrix flattened in column major format (j*3+i indexing), this is equivalent to Fortran-order in numpy). This matrix will multiply the structure coordinates from the left. The default value is the identity matrix (corresponds to no rotation). */
        rotation: OptionalField<number[]>;
        /** Translation vector, applied to the structure coordinates after rotation. The default value is the zero vector (corresponds to no translation). */
        translation: OptionalField<[number, number, number]>;
        /** Transform matrix (4x4 matrix flattened in column major format (j*4+i indexing), this is equivalent to Fortran-order in numpy). This matrix will multiply the structure coordinates from the left. Takes precedence over \`rotation\` and \`translation\`. */
        matrix: OptionalField<number[] | null>;
    }>;
    component: SimpleParamsSchema<{
        /** Defines what part of the parent structure should be included in this component. */
        selector: RequiredField<"all" | "polymer" | "water" | "branched" | "ligand" | "ion" | "nucleic" | "protein" | "coarse" | {
            label_entity_id?: string | undefined;
            label_asym_id?: string | undefined;
            auth_asym_id?: string | undefined;
            label_seq_id?: number | undefined;
            auth_seq_id?: number | undefined;
            pdbx_PDB_ins_code?: string | undefined;
            beg_label_seq_id?: number | undefined;
            end_label_seq_id?: number | undefined;
            beg_auth_seq_id?: number | undefined;
            end_auth_seq_id?: number | undefined;
            label_comp_id?: string | undefined;
            auth_comp_id?: string | undefined;
            label_atom_id?: string | undefined;
            auth_atom_id?: string | undefined;
            type_symbol?: string | undefined;
            atom_id?: number | undefined;
            atom_index?: number | undefined;
            instance_id?: string | undefined;
        } | {
            label_entity_id?: string | undefined;
            label_asym_id?: string | undefined;
            auth_asym_id?: string | undefined;
            label_seq_id?: number | undefined;
            auth_seq_id?: number | undefined;
            pdbx_PDB_ins_code?: string | undefined;
            beg_label_seq_id?: number | undefined;
            end_label_seq_id?: number | undefined;
            beg_auth_seq_id?: number | undefined;
            end_auth_seq_id?: number | undefined;
            label_comp_id?: string | undefined;
            auth_comp_id?: string | undefined;
            label_atom_id?: string | undefined;
            auth_atom_id?: string | undefined;
            type_symbol?: string | undefined;
            atom_id?: number | undefined;
            atom_index?: number | undefined;
            instance_id?: string | undefined;
        }[]>;
    }>;
    component_from_uri: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the component identifier. */
        field_name: OptionalField<string>;
        /** List of component identifiers (i.e. values in the field given by \`field_name\`) which should be included in this component. If \`null\`, component identifiers are ignored (all annotation rows are included), and \`field_name\` field can be dropped from the annotation. */
        field_values: OptionalField<string[] | null>;
        /** URL of the annotation resource. */
        uri: RequiredField<string>;
        /** Format of the annotation resource. */
        format: RequiredField<"json" | "cif" | "bcif">;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\` and \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    component_from_source: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the component identifier. */
        field_name: OptionalField<string>;
        /** List of component identifiers (i.e. values in the field given by \`field_name\`) which should be included in this component. If \`null\`, component identifiers are ignored (all annotation rows are included), and \`field_name\` field can be dropped from the annotation. */
        field_values: OptionalField<string[] | null>;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from. If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from. If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    representation: UnionParamsSchema<"type", {
        cartoon: SimpleParamsSchema<{
            size_factor: OptionalField<number>;
            tubular_helices: OptionalField<boolean>;
        }>;
        ball_and_stick: SimpleParamsSchema<{
            size_factor: OptionalField<number>;
            ignore_hydrogens: OptionalField<boolean>;
        }>;
        spacefill: SimpleParamsSchema<{
            size_factor: OptionalField<number>;
            ignore_hydrogens: OptionalField<boolean>;
        }>;
        carbohydrate: SimpleParamsSchema<{
            size_factor: OptionalField<number>;
        }>;
        surface: SimpleParamsSchema<{
            size_factor: OptionalField<number>;
            ignore_hydrogens: OptionalField<boolean>;
        }>;
    }>;
    volume: SimpleParamsSchema<{
        channel_id: OptionalField<string | null>;
    }>;
    volume_representation: UnionParamsSchema<"type", {
        isosurface: SimpleParamsSchema<{
            relative_isovalue: OptionalField<number | null>;
            absolute_isovalue: OptionalField<number | null>;
            show_wireframe: OptionalField<boolean>;
            show_faces: OptionalField<boolean>;
        }>;
        grid_slice: SimpleParamsSchema<{
            dimension: RequiredField<"x" | "y" | "z">;
            absolute_index: OptionalField<number | null>;
            relative_index: OptionalField<number | null>;
            relative_isovalue: OptionalField<number | null>;
            absolute_isovalue: OptionalField<number | null>;
        }>;
    }>;
    color: SimpleParamsSchema<{
        /** Color to apply to the representation. Can be either an X11 color name (e.g. \`"red"\`) or a hexadecimal code (e.g. \`"#FF0011"\`). */
        color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`>;
        /** Defines to what part of the representation this color should be applied. */
        selector: OptionalField<"all" | "polymer" | "water" | "branched" | "ligand" | "ion" | "nucleic" | "protein" | "coarse" | {
            label_entity_id?: string | undefined;
            label_asym_id?: string | undefined;
            auth_asym_id?: string | undefined;
            label_seq_id?: number | undefined;
            auth_seq_id?: number | undefined;
            pdbx_PDB_ins_code?: string | undefined;
            beg_label_seq_id?: number | undefined;
            end_label_seq_id?: number | undefined;
            beg_auth_seq_id?: number | undefined;
            end_auth_seq_id?: number | undefined;
            label_comp_id?: string | undefined;
            auth_comp_id?: string | undefined;
            label_atom_id?: string | undefined;
            auth_atom_id?: string | undefined;
            type_symbol?: string | undefined;
            atom_id?: number | undefined;
            atom_index?: number | undefined;
            instance_id?: string | undefined;
        } | {
            label_entity_id?: string | undefined;
            label_asym_id?: string | undefined;
            auth_asym_id?: string | undefined;
            label_seq_id?: number | undefined;
            auth_seq_id?: number | undefined;
            pdbx_PDB_ins_code?: string | undefined;
            beg_label_seq_id?: number | undefined;
            end_label_seq_id?: number | undefined;
            beg_auth_seq_id?: number | undefined;
            end_auth_seq_id?: number | undefined;
            label_comp_id?: string | undefined;
            auth_comp_id?: string | undefined;
            label_atom_id?: string | undefined;
            auth_atom_id?: string | undefined;
            type_symbol?: string | undefined;
            atom_id?: number | undefined;
            atom_index?: number | undefined;
            instance_id?: string | undefined;
        }[]>;
    }>;
    color_from_uri: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the color. */
        field_name: OptionalField<string>;
        /** Customize mapping of annotation values to colors. */
        palette: OptionalField<({
            kind: "categorical";
        } & {
            colors?: "ElementSymbol" | "Reds" | "Oranges" | "Greens" | "Blues" | "Purples" | "Greys" | "Spectral" | "Magma" | "Inferno" | "Plasma" | "Viridis" | "Cividis" | "Accent" | "Paired" | "Turbo" | "Warm" | "Cool" | "CubehelixDefault" | "Rainbow" | "Sinebow" | "Category10" | "Observable10" | "Tableau10" | "OrRd" | "BuGn" | "PuBuGn" | "GnBu" | "PuBu" | "BuPu" | "RdPu" | "PuRd" | "YlOrRd" | "YlOrBr" | "YlGn" | "YlGnBu" | "RdBu" | "RdGy" | "PiYG" | "BrBG" | "PRGn" | "PuOr" | "RdYlGn" | "RdYlBu" | "Set1" | "Set2" | "Set3" | "Pastel1" | "Pastel2" | "Dark2" | "Chainbow" | "ResidueName" | "ResidueProperties" | "SecondaryStructure" | ("aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`)[] | {
                [x: string]: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`;
            } | undefined;
            repeat_color_list?: boolean | undefined;
            sort?: "none" | "numeric" | "lexical" | undefined;
            sort_direction?: "ascending" | "descending" | undefined;
            case_insensitive?: boolean | undefined;
            missing_color?: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null | undefined;
        }) | ({
            kind: "discrete";
        } & {
            colors?: "Reds" | "Oranges" | "Greens" | "Blues" | "Purples" | "Greys" | "Spectral" | "Magma" | "Inferno" | "Plasma" | "Viridis" | "Cividis" | "Accent" | "Paired" | "Turbo" | "Warm" | "Cool" | "CubehelixDefault" | "Rainbow" | "Sinebow" | "Category10" | "Observable10" | "Tableau10" | "OrRd" | "BuGn" | "PuBuGn" | "GnBu" | "PuBu" | "BuPu" | "RdPu" | "PuRd" | "YlOrRd" | "YlOrBr" | "YlGn" | "YlGnBu" | "RdBu" | "RdGy" | "PiYG" | "BrBG" | "PRGn" | "PuOr" | "RdYlGn" | "RdYlBu" | "Set1" | "Set2" | "Set3" | "Pastel1" | "Pastel2" | "Dark2" | "Chainbow" | ("aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`)[] | ["aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`, number][] | ["aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null, number | null, number | null][] | undefined;
            reverse?: boolean | undefined;
            mode?: "absolute" | "normalized" | undefined;
            value_domain?: [number | null, number | null] | undefined;
        }) | ({
            kind: "continuous";
        } & {
            colors?: "Reds" | "Oranges" | "Greens" | "Blues" | "Purples" | "Greys" | "Spectral" | "Magma" | "Inferno" | "Plasma" | "Viridis" | "Cividis" | "Accent" | "Paired" | "Turbo" | "Warm" | "Cool" | "CubehelixDefault" | "Rainbow" | "Sinebow" | "Category10" | "Observable10" | "Tableau10" | "OrRd" | "BuGn" | "PuBuGn" | "GnBu" | "PuBu" | "BuPu" | "RdPu" | "PuRd" | "YlOrRd" | "YlOrBr" | "YlGn" | "YlGnBu" | "RdBu" | "RdGy" | "PiYG" | "BrBG" | "PRGn" | "PuOr" | "RdYlGn" | "RdYlBu" | "Set1" | "Set2" | "Set3" | "Pastel1" | "Pastel2" | "Dark2" | "Chainbow" | ("aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`)[] | ["aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`, number][] | undefined;
            reverse?: boolean | undefined;
            mode?: "absolute" | "normalized" | undefined;
            value_domain?: [number | null, number | null] | undefined;
            underflow_color?: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "auto" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null | undefined;
            overflow_color?: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "auto" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null | undefined;
        }) | null>;
        /** URL of the annotation resource. */
        uri: RequiredField<string>;
        /** Format of the annotation resource. */
        format: RequiredField<"json" | "cif" | "bcif">;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\` and \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    color_from_source: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the color. */
        field_name: OptionalField<string>;
        /** Customize mapping of annotation values to colors. */
        palette: OptionalField<({
            kind: "categorical";
        } & {
            colors?: "ElementSymbol" | "Reds" | "Oranges" | "Greens" | "Blues" | "Purples" | "Greys" | "Spectral" | "Magma" | "Inferno" | "Plasma" | "Viridis" | "Cividis" | "Accent" | "Paired" | "Turbo" | "Warm" | "Cool" | "CubehelixDefault" | "Rainbow" | "Sinebow" | "Category10" | "Observable10" | "Tableau10" | "OrRd" | "BuGn" | "PuBuGn" | "GnBu" | "PuBu" | "BuPu" | "RdPu" | "PuRd" | "YlOrRd" | "YlOrBr" | "YlGn" | "YlGnBu" | "RdBu" | "RdGy" | "PiYG" | "BrBG" | "PRGn" | "PuOr" | "RdYlGn" | "RdYlBu" | "Set1" | "Set2" | "Set3" | "Pastel1" | "Pastel2" | "Dark2" | "Chainbow" | "ResidueName" | "ResidueProperties" | "SecondaryStructure" | ("aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`)[] | {
                [x: string]: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`;
            } | undefined;
            repeat_color_list?: boolean | undefined;
            sort?: "none" | "numeric" | "lexical" | undefined;
            sort_direction?: "ascending" | "descending" | undefined;
            case_insensitive?: boolean | undefined;
            missing_color?: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null | undefined;
        }) | ({
            kind: "discrete";
        } & {
            colors?: "Reds" | "Oranges" | "Greens" | "Blues" | "Purples" | "Greys" | "Spectral" | "Magma" | "Inferno" | "Plasma" | "Viridis" | "Cividis" | "Accent" | "Paired" | "Turbo" | "Warm" | "Cool" | "CubehelixDefault" | "Rainbow" | "Sinebow" | "Category10" | "Observable10" | "Tableau10" | "OrRd" | "BuGn" | "PuBuGn" | "GnBu" | "PuBu" | "BuPu" | "RdPu" | "PuRd" | "YlOrRd" | "YlOrBr" | "YlGn" | "YlGnBu" | "RdBu" | "RdGy" | "PiYG" | "BrBG" | "PRGn" | "PuOr" | "RdYlGn" | "RdYlBu" | "Set1" | "Set2" | "Set3" | "Pastel1" | "Pastel2" | "Dark2" | "Chainbow" | ("aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`)[] | ["aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`, number][] | ["aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null, number | null, number | null][] | undefined;
            reverse?: boolean | undefined;
            mode?: "absolute" | "normalized" | undefined;
            value_domain?: [number | null, number | null] | undefined;
        }) | ({
            kind: "continuous";
        } & {
            colors?: "Reds" | "Oranges" | "Greens" | "Blues" | "Purples" | "Greys" | "Spectral" | "Magma" | "Inferno" | "Plasma" | "Viridis" | "Cividis" | "Accent" | "Paired" | "Turbo" | "Warm" | "Cool" | "CubehelixDefault" | "Rainbow" | "Sinebow" | "Category10" | "Observable10" | "Tableau10" | "OrRd" | "BuGn" | "PuBuGn" | "GnBu" | "PuBu" | "BuPu" | "RdPu" | "PuRd" | "YlOrRd" | "YlOrBr" | "YlGn" | "YlGnBu" | "RdBu" | "RdGy" | "PiYG" | "BrBG" | "PRGn" | "PuOr" | "RdYlGn" | "RdYlBu" | "Set1" | "Set2" | "Set3" | "Pastel1" | "Pastel2" | "Dark2" | "Chainbow" | ("aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`)[] | ["aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`, number][] | undefined;
            reverse?: boolean | undefined;
            mode?: "absolute" | "normalized" | undefined;
            value_domain?: [number | null, number | null] | undefined;
            underflow_color?: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "auto" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null | undefined;
            overflow_color?: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "auto" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null | undefined;
        }) | null>;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from. If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from. If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    clip: UnionParamsSchema<"type", {
        plane: SimpleParamsSchema<{
            normal: RequiredField<[number, number, number]>;
            point: RequiredField<[number, number, number]>;
            check_transform: OptionalField<number[] | null>;
            invert: OptionalField<boolean>;
            variant: OptionalField<"object" | "pixel">;
        }>;
        sphere: SimpleParamsSchema<{
            center: RequiredField<[number, number, number]>;
            radius: OptionalField<number>;
            check_transform: OptionalField<number[] | null>;
            invert: OptionalField<boolean>;
            variant: OptionalField<"object" | "pixel">;
        }>;
        box: SimpleParamsSchema<{
            center: RequiredField<[number, number, number]>;
            size: OptionalField<[number, number, number]>;
            rotation: OptionalField<number[]>;
            check_transform: OptionalField<number[] | null>;
            invert: OptionalField<boolean>;
            variant: OptionalField<"object" | "pixel">;
        }>;
    }>;
    opacity: SimpleParamsSchema<{
        /** Opacity of a representation. 0.0: fully transparent, 1.0: fully opaque. */
        opacity: RequiredField<number>;
    }>;
    label: SimpleParamsSchema<{
        /** Content of the shown label. */
        text: RequiredField<string>;
    }>;
    label_from_uri: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the label text. */
        field_name: OptionalField<string>;
        /** URL of the annotation resource. */
        uri: RequiredField<string>;
        /** Format of the annotation resource. */
        format: RequiredField<"json" | "cif" | "bcif">;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\` and \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    label_from_source: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the label text. */
        field_name: OptionalField<string>;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from. If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from. If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    tooltip: SimpleParamsSchema<{
        /** Content of the shown tooltip. */
        text: RequiredField<string>;
    }>;
    tooltip_from_uri: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the tooltip text. */
        field_name: OptionalField<string>;
        /** URL of the annotation resource. */
        uri: RequiredField<string>;
        /** Format of the annotation resource. */
        format: RequiredField<"json" | "cif" | "bcif">;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\` and \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from (only applies when \`format\` is \`"cif"\` or \`"bcif"\`). If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    tooltip_from_source: SimpleParamsSchema<{
        /** Name of the column in CIF or field name (key) in JSON that contains the tooltip text. */
        field_name: OptionalField<string>;
        /** Annotation schema defines what fields in the annotation will be taken into account. */
        schema: RequiredField<"atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic">;
        /** Header of the CIF block to read annotation from. If \`null\`, block is selected based on \`block_index\`. */
        block_header: OptionalField<string | null>;
        /** 0-based index of the CIF block to read annotation from (only applies when \`block_header\` is \`null\`). */
        block_index: OptionalField<number>;
        /** Name of the CIF category to read annotation from. If \`null\`, the first category in the block is used. */
        category_name: OptionalField<string | null>;
        /** Optional remapping of annotation field names \`{ standardName1: actualName1, ... }\`. Use \`{ "label_asym_id": "X" }\` to load actual field "X" as "label_asym_id". Use \`{ "label_asym_id": null }\` to ignore actual field "label_asym_id". Fields not mentioned here are mapped implicitely (i.e. actual name = standard name). */
        field_remapping: OptionalField<{
            [x: string]: string | null;
        }>;
    }>;
    focus: SimpleParamsSchema<{
        /** Vector describing the direction of the view (camera position -> focused target). */
        direction: OptionalField<[number, number, number]>;
        /** Vector which will be aligned with the screen Y axis. */
        up: OptionalField<[number, number, number]>;
        /** Radius of the focused sphere (overrides \`radius_factor\` and \`radius_extra\`. */
        radius: OptionalField<number | null>;
        /** Radius of the focused sphere relative to the radius of parent component (default: 1). Focused radius = component_radius * radius_factor + radius_extent. */
        radius_factor: OptionalField<number>;
        /** Addition to the radius of the focused sphere, if computed from the radius of parent component (default: 0). Focused radius = component_radius * radius_factor + radius_extent. */
        radius_extent: OptionalField<number>;
    }>;
    camera: SimpleParamsSchema<{
        /** Coordinates of the point in space at which the camera is pointing. */
        target: RequiredField<[number, number, number]>;
        /** Coordinates of the camera. */
        position: RequiredField<[number, number, number]>;
        /** Vector which will be aligned with the screen Y axis. */
        up: OptionalField<[number, number, number]>;
    }>;
    canvas: SimpleParamsSchema<{
        /** Color of the canvas background. Can be either an X11 color name (e.g. \`"red"\`) or a hexadecimal code (e.g. \`"#FF0011"\`). */
        background_color: RequiredField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`>;
    }>;
    primitives: SimpleParamsSchema<{
        /** Default color for primitives in this group. */
        color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`>;
        /** Default label color for primitives in this group. */
        label_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`>;
        /** Default tooltip for primitives in this group. */
        tooltip: OptionalField<string | null>;
        /** Opacity of primitive geometry in this group. */
        opacity: OptionalField<number>;
        /** Opacity of primitive labels in this group. */
        label_opacity: OptionalField<number>;
        /** Whether to show a tether line between the label and the target. Defaults to false. */
        label_show_tether: OptionalField<boolean>;
        /** Length of the tether line between the label and the target. Defaults to 1 (Angstrom). */
        label_tether_length: OptionalField<number>;
        /** How to attach the label to the target. Defaults to "middle-center". */
        label_attachment: OptionalField<"middle-center" | "bottom-left" | "bottom-center" | "bottom-right" | "middle-left" | "middle-right" | "top-left" | "top-center" | "top-right">;
        /** Background color of the label. Defaults to none/transparent. */
        label_background_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
        /** Load snapshot with the provided key when interacting with this primitives group. */
        snapshot_key: OptionalField<string | null>;
        /** Instances of this primitive group defined as 4x4 column major (j * 4 + i indexing) transformation matrices. */
        instances: OptionalField<number[][] | null>;
    }>;
    primitives_from_uri: SimpleParamsSchema<{
        /** Location of the resource. */
        uri: RequiredField<string>;
        /** Format of the data. */
        format: RequiredField<"mvs-node-json">;
        /** List of nodes the data are referencing. */
        references: OptionalField<string[]>;
    }>;
    primitive: UnionParamsSchema<"kind", {
        mesh: SimpleParamsSchema<{
            vertices: RequiredField<number[]>;
            indices: RequiredField<number[]>;
            triangle_groups: OptionalField<number[] | null>;
            group_colors: OptionalField<{
                [x: number]: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`;
            }>;
            group_tooltips: OptionalField<{
                [x: number]: string;
            }>;
            color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            tooltip: OptionalField<string | null>;
            show_triangles: OptionalField<boolean>;
            show_wireframe: OptionalField<boolean>;
            wireframe_width: OptionalField<number>;
            wireframe_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
        }>;
        lines: SimpleParamsSchema<{
            vertices: RequiredField<number[]>;
            indices: RequiredField<number[]>;
            line_groups: OptionalField<number[] | null>;
            group_colors: OptionalField<{
                [x: number]: "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\`;
            }>;
            group_tooltips: OptionalField<{
                [x: number]: string;
            }>;
            group_widths: OptionalField<{
                [x: number]: number;
            }>;
            color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            tooltip: OptionalField<string | null>;
            width: OptionalField<number>;
        }>;
        tube: SimpleParamsSchema<{
            tooltip: OptionalField<string | null>;
            start: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            end: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            radius: OptionalField<number>;
            dash_length: OptionalField<number | null>;
            color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
        }>;
        arrow: SimpleParamsSchema<{
            start: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            end: OptionalField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            } | null>;
            direction: OptionalField<[number, number, number] | null>;
            length: OptionalField<number | null>;
            show_start_cap: OptionalField<boolean>;
            start_cap_length: OptionalField<number | null>;
            start_cap_radius: OptionalField<number | null>;
            show_end_cap: OptionalField<boolean>;
            end_cap_length: OptionalField<number | null>;
            end_cap_radius: OptionalField<number | null>;
            show_tube: OptionalField<boolean>;
            tube_radius: OptionalField<number>;
            tube_dash_length: OptionalField<number | null>;
            color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            tooltip: OptionalField<string | null>;
        }>;
        distance_measurement: SimpleParamsSchema<{
            label_template: OptionalField<string>;
            label_size: OptionalField<number | null>;
            label_auto_size_scale: OptionalField<number>;
            label_auto_size_min: OptionalField<number>;
            label_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            start: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            end: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            radius: OptionalField<number>;
            dash_length: OptionalField<number | null>;
            color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
        }>;
        angle_measurement: SimpleParamsSchema<{
            a: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            b: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            c: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            label_template: OptionalField<string>;
            label_size: OptionalField<number | null>;
            label_auto_size_scale: OptionalField<number>;
            label_auto_size_min: OptionalField<number>;
            label_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            show_vector: OptionalField<boolean>;
            vector_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            vector_radius: OptionalField<number>;
            show_section: OptionalField<boolean>;
            section_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            section_radius: OptionalField<number | null>;
            section_radius_scale: OptionalField<number>;
        }>;
        label: SimpleParamsSchema<{
            position: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            text: RequiredField<string>;
            label_size: OptionalField<number>;
            label_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            label_offset: OptionalField<number>;
        }>;
        ellipse: SimpleParamsSchema<{
            color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            as_circle: OptionalField<boolean>;
            center: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            major_axis: OptionalField<[number, number, number] | null>;
            minor_axis: OptionalField<[number, number, number] | null>;
            major_axis_endpoint: OptionalField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            } | null>;
            minor_axis_endpoint: OptionalField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            } | null>;
            radius_major: OptionalField<number | null>;
            radius_minor: OptionalField<number | null>;
            theta_start: OptionalField<number>;
            theta_end: OptionalField<number>;
            tooltip: OptionalField<string | null>;
        }>;
        ellipsoid: SimpleParamsSchema<{
            color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            center: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            major_axis: OptionalField<[number, number, number] | null>;
            minor_axis: OptionalField<[number, number, number] | null>;
            major_axis_endpoint: OptionalField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            } | null>;
            minor_axis_endpoint: OptionalField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            } | null>;
            radius: OptionalField<number | [number, number, number] | null>;
            radius_extent: OptionalField<number | [number, number, number] | null>;
            tooltip: OptionalField<string | null>;
        }>;
        box: SimpleParamsSchema<{
            center: RequiredField<[number, number, number] | {
                label_entity_id?: string | undefined;
                label_asym_id?: string | undefined;
                auth_asym_id?: string | undefined;
                label_seq_id?: number | undefined;
                auth_seq_id?: number | undefined;
                pdbx_PDB_ins_code?: string | undefined;
                beg_label_seq_id?: number | undefined;
                end_label_seq_id?: number | undefined;
                beg_auth_seq_id?: number | undefined;
                end_auth_seq_id?: number | undefined;
                label_comp_id?: string | undefined;
                auth_comp_id?: string | undefined;
                label_atom_id?: string | undefined;
                auth_atom_id?: string | undefined;
                type_symbol?: string | undefined;
                atom_id?: number | undefined;
                atom_index?: number | undefined;
                instance_id?: string | undefined;
            } | {
                structure_ref?: string | undefined;
                expression_schema?: "atom" | "residue" | "entity" | "chain" | "whole_structure" | "auth_chain" | "auth_residue" | "residue_range" | "auth_residue_range" | "auth_atom" | "all_atomic" | undefined;
                expressions?: {
                    label_entity_id?: string | undefined;
                    label_asym_id?: string | undefined;
                    auth_asym_id?: string | undefined;
                    label_seq_id?: number | undefined;
                    auth_seq_id?: number | undefined;
                    pdbx_PDB_ins_code?: string | undefined;
                    beg_label_seq_id?: number | undefined;
                    end_label_seq_id?: number | undefined;
                    beg_auth_seq_id?: number | undefined;
                    end_auth_seq_id?: number | undefined;
                    label_comp_id?: string | undefined;
                    auth_comp_id?: string | undefined;
                    label_atom_id?: string | undefined;
                    auth_atom_id?: string | undefined;
                    type_symbol?: string | undefined;
                    atom_id?: number | undefined;
                    atom_index?: number | undefined;
                    instance_id?: string | undefined;
                }[] | undefined;
            }>;
            extent: OptionalField<[number, number, number] | null>;
            show_faces: OptionalField<boolean>;
            face_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            show_edges: OptionalField<boolean>;
            edge_radius: OptionalField<number>;
            edge_color: OptionalField<"aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" | "cornflower" | "laserlemon" | "lightgoldenrod" | "maroon2" | "maroon3" | "purple2" | "purple3" | \`#\${string}\` | null>;
            tooltip: OptionalField<string | null>;
        }>;
    }>;
}, "root">;
/** Node kind in a \`MVSTree\` */
type MVSKind = keyof typeof MVSTreeSchema.nodes;
/** Params for a specific node kind in a \`MVSTree\` */
type MVSNodeParams<TKind extends MVSKind> = ParamsOfKind<MVSTree, TKind>;
/** MolViewSpec tree */
type MVSTree = TreeFor<typeof MVSTreeSchema>;
/** Any subtree in a \`MVSTree\` (e.g. its root doesn't need to be 'root') */
type MVSSubtree<TKind extends MVSKind = MVSKind> = SubtreeOfKind<MVSTree, TKind>;

/**
 * Copyright (c) 2023-2025 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Adam Midlik <midlik@gmail.com>
 * @author David Sehnal <david.sehnal@gmail.com>
 */

/** Base class for MVS builder pointing to anything */
declare class _Base<TKind extends MVSKind> {
    protected readonly _root: Root;
    protected readonly _node: MVSSubtree<TKind>;
    constructor(_root: Root, _node: MVSSubtree<TKind>);
    /** Create a new node, append as child to current _node, and return the new node */
    protected addChild<TChildKind extends MVSKind>(kind: TChildKind, params_: MVSNodeParams<TChildKind> & CustomAndRef): MVSSubtree<TChildKind>;
}
/** MVS builder pointing to the 'root' node */
declare class Root extends _Base<'root'> implements FocusMixin, PrimitivesMixin {
    constructor(params_: CustomAndRef);
    /** Return the current state of the builder as object in MVS format. */
    getState(metadata?: Pick<GlobalMetadata, 'title' | 'description' | 'description_format'>): MVSData_State;
    /** Return the current state of the builder as a snapshot object to be used in multi-state . */
    getSnapshot(metadata: SnapshotMetadata): Snapshot;
    /** Add a 'camera' node and return builder pointing to the root. 'camera' node instructs to set the camera position and orientation. */
    camera(params: MVSNodeParams<'camera'> & CustomAndRef): Root;
    /** Add a 'canvas' node and return builder pointing to the root. 'canvas' node sets canvas properties. */
    canvas(params: MVSNodeParams<'canvas'> & CustomAndRef): Root;
    /** Add a 'download' node and return builder pointing to it. 'download' node instructs to retrieve a data resource. */
    download(params: MVSNodeParams<'download'> & CustomAndRef): Download;
    focus: (params?: ({} & {
        direction?: [number, number, number] | undefined;
        up?: [number, number, number] | undefined;
        radius?: number | null | undefined;
        radius_factor?: number | undefined;
        radius_extent?: number | undefined;
    } & CustomAndRef) | undefined) => this;
    primitives: (params?: MVSNodeParams<"primitives"> & CustomAndRef) => Primitives;
    primitives_from_uri: (params: MVSNodeParams<"primitives_from_uri"> & CustomAndRef) => PrimitivesFromUri;
}
/** MVS builder pointing to a 'download' node */
declare class Download extends _Base<'download'> {
    /** Add a 'parse' node and return builder pointing to it. 'parse' node instructs to parse a data resource. */
    parse(params: MVSNodeParams<'parse'> & CustomAndRef): Parse;
}
/** Subsets of 'structure' node params which will be passed to individual builder functions. */
declare const StructureParamsSubsets: {
    model: ("block_header" | "block_index" | "model_index")[];
    assembly: ("assembly_id" | "block_header" | "block_index" | "model_index")[];
    symmetry: ("block_header" | "block_index" | "model_index" | "ijk_min" | "ijk_max")[];
    symmetry_mates: ("radius" | "block_header" | "block_index" | "model_index")[];
};
/** MVS builder pointing to a 'parse' node */
declare class Parse extends _Base<'parse'> {
    /** Add a 'structure' node representing a "model structure", i.e. includes all coordinates from the original model without applying any transformations.
     * Return builder pointing to the new node. */
    modelStructure(params?: Pick<MVSNodeParams<'structure'>, typeof StructureParamsSubsets['model'][number]> & CustomAndRef): Structure;
    /** Add a 'structure' node representing an "assembly structure", i.e. may apply filters and symmetry operators to the original model coordinates.
     * Return builder pointing to the new node. */
    assemblyStructure(params?: Pick<MVSNodeParams<'structure'>, typeof StructureParamsSubsets['assembly'][number]> & CustomAndRef): Structure;
    /** Add a 'structure' node representing a "symmetry structure", i.e. applies symmetry operators to build crystal unit cells within given Miller indices.
     * Return builder pointing to the new node. */
    symmetryStructure(params?: Pick<MVSNodeParams<'structure'>, typeof StructureParamsSubsets['symmetry'][number]> & CustomAndRef): Structure;
    /** Add a 'structure' node representing a "symmetry mates structure", i.e. applies symmetry operators to build asymmetric units within a radius from the original model.
     * Return builder pointing to the new node. */
    symmetryMatesStructure(params?: Pick<MVSNodeParams<'structure'>, typeof StructureParamsSubsets['symmetry_mates'][number]> & CustomAndRef): Structure;
    /** Add a 'volume' node representing raw volume data */
    volume(params?: MVSNodeParams<'volume'> & CustomAndRef): Volume;
}
/** MVS builder pointing to a 'structure' node */
declare class Structure extends _Base<'structure'> implements PrimitivesMixin, TransformMixin {
    /** Add a 'component' node and return builder pointing to it. 'component' node instructs to create a component (i.e. a subset of the parent structure). */
    component(params?: Partial<MVSNodeParams<'component'>> & CustomAndRef): Component;
    /** Add a 'component_from_uri' node and return builder pointing to it. 'component_from_uri' node instructs to create a component defined by an external annotation resource. */
    componentFromUri(params: MVSNodeParams<'component_from_uri'> & CustomAndRef): Component;
    /** Add a 'component_from_source' node and return builder pointing to it. 'component_from_source' node instructs to create a component defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file. */
    componentFromSource(params: MVSNodeParams<'component_from_source'> & CustomAndRef): Component;
    /** Add a 'label_from_uri' node and return builder pointing back to the structure node. 'label_from_uri' node instructs to add labels (textual visual representations) to parts of a structure. The labels are defined by an external annotation resource. */
    labelFromUri(params: MVSNodeParams<'label_from_uri'> & CustomAndRef): Structure;
    /** Add a 'label_from_source' node and return builder pointing back to the structure node. 'label_from_source' node instructs to add labels (textual visual representations) to parts of a structure. The labels are defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file. */
    labelFromSource(params: MVSNodeParams<'label_from_source'> & CustomAndRef): Structure;
    /** Add a 'tooltip_from_uri' node and return builder pointing back to the structure node. 'tooltip_from_uri' node instructs to add tooltips to parts of a structure. The tooltips are defined by an external annotation resource. */
    tooltipFromUri(params: MVSNodeParams<'tooltip_from_uri'> & CustomAndRef): Structure;
    /** Add a 'tooltip_from_source' node and return builder pointing back to the structure node. 'tooltip_from_source' node instructs to add tooltips to parts of a structure. The tooltips are defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file. */
    tooltipFromSource(params: MVSNodeParams<'tooltip_from_source' & CustomAndRef>): Structure;
    transform: (params?: ({} & {
        rotation?: number[] | undefined;
        translation?: [number, number, number] | undefined;
        matrix?: number[] | null | undefined;
    } & CustomAndRef) | undefined) => this;
    instance: (params?: ({} & {
        rotation?: number[] | undefined;
        translation?: [number, number, number] | undefined;
        matrix?: number[] | null | undefined;
    } & CustomAndRef) | undefined) => this;
    primitives: (params?: MVSNodeParams<"primitives"> & CustomAndRef) => Primitives;
    primitives_from_uri: (params: MVSNodeParams<"primitives_from_uri"> & CustomAndRef) => PrimitivesFromUri;
}
/** MVS builder pointing to a 'component' or 'component_from_uri' or 'component_from_source' node */
declare class Component extends _Base<'component' | 'component_from_uri' | 'component_from_source'> implements FocusMixin, TransformMixin {
    /** Add a 'representation' node and return builder pointing to it. 'representation' node instructs to create a visual representation of a component. */
    representation(params?: Partial<MVSNodeParams<'representation'>> & CustomAndRef): Representation;
    /** Add a 'label' node and return builder pointing back to the component node. 'label' node instructs to add a label (textual visual representation) to a component. */
    label(params: MVSNodeParams<'label'> & CustomAndRef): Component;
    /** Add a 'tooltip' node and return builder pointing back to the component node. 'tooltip' node instructs to add a text which is not a part of the visualization but should be presented to the users when they interact with the component (typically, the tooltip will be shown somewhere on the screen when the user hovers over a visual representation of the component). */
    tooltip(params: MVSNodeParams<'tooltip'> & CustomAndRef): Component;
    focus: (params?: ({} & {
        direction?: [number, number, number] | undefined;
        up?: [number, number, number] | undefined;
        radius?: number | null | undefined;
        radius_factor?: number | undefined;
        radius_extent?: number | undefined;
    } & CustomAndRef) | undefined) => this;
    transform: (params?: ({} & {
        rotation?: number[] | undefined;
        translation?: [number, number, number] | undefined;
        matrix?: number[] | null | undefined;
    } & CustomAndRef) | undefined) => this;
    instance: (params?: ({} & {
        rotation?: number[] | undefined;
        translation?: [number, number, number] | undefined;
        matrix?: number[] | null | undefined;
    } & CustomAndRef) | undefined) => this;
}
/** MVS builder pointing to a 'representation' node */
declare class Representation extends _Base<'representation'> {
    /** Add a 'color' node and return builder pointing back to the representation node. 'color' node instructs to apply color to a visual representation. */
    color(params: MVSNodeParams<'color'> & CustomAndRef): Representation;
    /** Add a 'color_from_uri' node and return builder pointing back to the representation node. 'color_from_uri' node instructs to apply colors to a visual representation. The colors are defined by an external annotation resource. */
    colorFromUri(params: MVSNodeParams<'color_from_uri'> & CustomAndRef): Representation;
    /** Add a 'color_from_source' node and return builder pointing back to the representation node. 'color_from_source' node instructs to apply colors to a visual representation. The colors are defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file. */
    colorFromSource(params: MVSNodeParams<'color_from_source'> & CustomAndRef): Representation;
    /** Add an 'opacity' node and return builder pointing back to the representation node. 'opacity' node instructs to customize opacity/transparency of a visual representation. */
    opacity(params: MVSNodeParams<'opacity'> & CustomAndRef): Representation;
    /** Add a 'clip' node and return builder pointing back to the representation node. 'clip' node instructs to apply clipping to a visual representation. */
    clip(params: MVSNodeParams<'clip'> & CustomAndRef): Representation;
}
/** MVS builder pointing to a 'component' or 'component_from_uri' or 'component_from_source' node */
declare class Volume extends _Base<'volume'> implements FocusMixin, TransformMixin {
    /** Add a 'representation' node and return builder pointing to it. 'representation' node instructs to create a visual representation of a component. */
    representation(params?: MVSNodeParams<'volume_representation'> & CustomAndRef): VolumeRepresentation;
    focus: (params?: ({} & {
        direction?: [number, number, number] | undefined;
        up?: [number, number, number] | undefined;
        radius?: number | null | undefined;
        radius_factor?: number | undefined;
        radius_extent?: number | undefined;
    } & CustomAndRef) | undefined) => this;
    transform: (params?: ({} & {
        rotation?: number[] | undefined;
        translation?: [number, number, number] | undefined;
        matrix?: number[] | null | undefined;
    } & CustomAndRef) | undefined) => this;
    instance: (params?: ({} & {
        rotation?: number[] | undefined;
        translation?: [number, number, number] | undefined;
        matrix?: number[] | null | undefined;
    } & CustomAndRef) | undefined) => this;
}
/** MVS builder pointing to a 'volume_representation' node */
declare class VolumeRepresentation extends _Base<'volume_representation'> implements FocusMixin {
    /** Add a 'color' node and return builder pointing back to the representation node. 'color' node instructs to apply color to a visual representation. */
    color(params: MVSNodeParams<'color'> & CustomAndRef): VolumeRepresentation;
    /** Add an 'opacity' node and return builder pointing back to the representation node. 'opacity' node instructs to customize opacity/transparency of a visual representation. */
    opacity(params: MVSNodeParams<'opacity'> & CustomAndRef): VolumeRepresentation;
    focus: (params?: ({} & {
        direction?: [number, number, number] | undefined;
        up?: [number, number, number] | undefined;
        radius?: number | null | undefined;
        radius_factor?: number | undefined;
        radius_extent?: number | undefined;
    } & CustomAndRef) | undefined) => this;
    /** Add a 'clip' node and return builder pointing back to the representation node. 'clip' node instructs to apply clipping to a visual representation. */
    clip(params: MVSNodeParams<'clip'> & CustomAndRef): VolumeRepresentation;
}
type MVSPrimitiveSubparams<TKind extends MVSNodeParams<'primitive'>['kind']> = Omit<Extract<MVSNodeParams<'primitive'>, {
    kind: TKind;
}>, 'kind'>;
/** MVS builder pointing to a 'primitives' node */
declare class Primitives extends _Base<'primitives'> implements FocusMixin {
    /** Construct custom meshes/shapes in a low-level fashion by providing vertices and indices. */
    mesh(params: MVSPrimitiveSubparams<'mesh'> & CustomAndRef): Primitives;
    /** Construct custom set of lines in a low-level fashion by providing vertices and indices. */
    lines(params: MVSPrimitiveSubparams<'lines'> & CustomAndRef): Primitives;
    /** Defines a tube (3D cylinder), connecting a start and an end point. */
    tube(params: MVSPrimitiveSubparams<'tube'> & CustomAndRef): Primitives;
    /** Defines an arrow. */
    arrow(params: MVSPrimitiveSubparams<'arrow'> & CustomAndRef): Primitives;
    /** Defines a tube, connecting a start and an end point, with label containing distance between start and end. */
    distance(params: MVSPrimitiveSubparams<'distance_measurement'> & CustomAndRef): Primitives;
    /** Defines a label. */
    label(params: MVSPrimitiveSubparams<'label'> & CustomAndRef): Primitives;
    /** Defines an ellipse. */
    ellipse(params: MVSPrimitiveSubparams<'ellipse'> & CustomAndRef): Primitives;
    /** Defines an ellipsoid */
    ellipsoid(params: MVSPrimitiveSubparams<'ellipsoid'> & CustomAndRef): Primitives;
    /** Defines a box. */
    box(params: MVSPrimitiveSubparams<'box'> & CustomAndRef): Primitives;
    focus: (params?: ({} & {
        direction?: [number, number, number] | undefined;
        up?: [number, number, number] | undefined;
        radius?: number | null | undefined;
        radius_factor?: number | undefined;
        radius_extent?: number | undefined;
    } & CustomAndRef) | undefined) => this;
}
/** MVS builder pointing to a 'primitives_from_uri' node */
declare class PrimitivesFromUri extends _Base<'primitives_from_uri'> implements FocusMixin {
    focus: (params?: ({} & {
        direction?: [number, number, number] | undefined;
        up?: [number, number, number] | undefined;
        radius?: number | null | undefined;
        radius_factor?: number | undefined;
        radius_extent?: number | undefined;
    } & CustomAndRef) | undefined) => this;
}
interface FocusMixin {
    /** Add a 'focus' node and return builder pointing back to the original node. 'focus' node instructs to set the camera focus to a component (zoom in). */
    focus(params: MVSNodeParams<'focus'> & CustomAndRef): any;
}
interface PrimitivesMixin {
    /** Allows the definition of a (group of) geometric primitives. You can add any number of primitives and then assign shared options (color, opacity etc.). */
    primitives(params: MVSNodeParams<'primitives'> & CustomAndRef): Primitives;
    /** Allows the definition of a (group of) geometric primitives provided dynamically. */
    primitives_from_uri(params: MVSNodeParams<'primitives_from_uri'> & CustomAndRef): PrimitivesFromUri;
}
interface TransformMixin {
    /** Add a 'transform' node and return builder pointing back to this node. 'transform' node instructs to rotate and/or translate coordinates. */
    transform(params: MVSNodeParams<'transform'> & CustomAndRef): this;
    /** Add an 'instance' node and return builder pointing back to this node. 'instance' node instructs to create a new instance of the object. */
    instance(params: MVSNodeParams<'instance'> & CustomAndRef): this;
}
interface CustomAndRef {
    custom?: CustomProps;
    ref?: string;
}

/**
 * Copyright (c) 2023-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Adam Midlik <midlik@gmail.com>
 */

/** Top-level metadata for a MVS file (single-state or multi-state). */
interface GlobalMetadata {
    /** Name of this MVSData */
    title?: string;
    /** Detailed description of this view */
    description?: string;
    /** Format of \`description\`. Default is 'markdown'. */
    description_format?: 'markdown' | 'plaintext';
    /** Timestamp when this view was exported. */
    timestamp: string;
    /** Version of MolViewSpec used to write this file. */
    version: string;
}
declare const GlobalMetadata: {
    create(metadata?: Pick<GlobalMetadata, "title" | "description" | "description_format">): GlobalMetadata;
};
/** Metadata for an individual snapshot. */
interface SnapshotMetadata {
    /** Name of this snapshot. */
    title?: string;
    /** Detailed description of this snapshot. */
    description?: string;
    /** Format of \`description\`. Default is 'markdown'. */
    description_format?: 'markdown' | 'plaintext';
    /** Unique identifier of this state, useful when working with collections of states. */
    key?: string;
    /** Timespan for snapshot. */
    linger_duration_ms: number;
    /** Timespan for the animation to the next snapshot. Leave empty to skip animations. */
    transition_duration_ms?: number;
}
interface Snapshot {
    /** Root of the node tree */
    root: MVSTree;
    /** Associated metadata */
    metadata: SnapshotMetadata;
}
/** MVSData with a single state */
interface MVSData_State {
    kind?: 'single';
    /** Root of the node tree */
    root: MVSTree;
    /** Associated metadata */
    metadata: GlobalMetadata;
}
/** MVSData with multiple states (snapshots) */
interface MVSData_States {
    kind: 'multiple';
    /** Ordered collection of individual states */
    snapshots: Snapshot[];
    /** Associated metadata */
    metadata: GlobalMetadata;
}
/** Top level of the MolViewSpec (MVS) data format. */
type MVSData = MVSData_State | MVSData_States;
declare const MVSData: {
    /** Currently supported major version of MolViewSpec format (e.g. 1 for version '1.0.8') */
    SupportedVersion: number;
    /** Parse MVSJ (MolViewSpec-JSON) format to \`MVSData\`. Does not include any validation. */
    fromMVSJ(mvsjString: string): MVSData;
    /** Encode \`MVSData\` to MVSJ (MolViewSpec-JSON) string. Use \`space\` parameter to control formatting (as with \`JSON.stringify\`). */
    toMVSJ(mvsData: MVSData, space?: string | number): string;
    /** Validate \`MVSData\`. Return \`true\` if OK; \`false\` if not OK.
     * If \`options.noExtra\` is true, presence of any extra node parameters is treated as an issue. */
    isValid(mvsData: MVSData, options?: {
        noExtra?: boolean;
    }): boolean;
    /** Validate \`MVSData\`. Return \`undefined\` if OK; list of issues if not OK.
     * If \`options.noExtra\` is true, presence of any extra node parameters is treated as an issue. */
    validationIssues(mvsData: MVSData, options?: {
        noExtra?: boolean;
    }): string[] | undefined;
    /** Return a human-friendly textual representation of \`mvsData\`. */
    toPrettyString(mvsData: MVSData): string;
    /** Create a new MolViewSpec builder containing only a root node. Example of MVS builder usage:
     *
     * \`\`\`
     * const builder = MVSData.createBuilder();
     * builder.canvas({ background_color: 'white' });
     * const struct = builder.download({ url: 'https://www.ebi.ac.uk/pdbe/entry-files/download/1og2_updated.cif' }).parse({ format: 'mmcif' }).modelStructure();
     * struct.component().representation().color({ color: '#3050F8' });
     * console.log(MVSData.toPrettyString(builder.getState()));
     * \`\`\`
     */
    createBuilder(): Root;
    /** Create a multi-state MVS data from a list of snapshots. */
    createMultistate(snapshots: Snapshot[], metadata?: Pick<GlobalMetadata, "title" | "description" | "description_format">): MVSData_States;
    /** Convert single-state MVSData into multi-state MVSData with one state. */
    stateToStates(state: MVSData_State): MVSData_States;
};


declare const builder: Root;
`;