name: PR Validation

on:
  pull_request:
    branches: ["main"]
    paths:
      - "api/**"
      - ".github/workflows/pr-check.yml"

env:
  REGISTRY: cerit.io
  IMAGE_NAME: mol-view-stories/mvs-api

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install flake8 black isort pytest

      - name: Run linting (flake8)
        run: |
          cd api
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run code formatting check (black)
        run: |
          cd api
          python -m black --check --diff .

      - name: Run import sorting check (isort)
        run: |
          cd api
          python -m isort --check-only --diff .

      - name: Run tests
        run: |
          cd api
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.xml
          flags: api
          name: api-coverage

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (without pushing)
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: false
          load: true
          tags: mol-view-stories-api:pr-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image
        run: |
          docker images mol-view-stories-api:pr-test
          docker run --rm mol-view-stories-api:pr-test python --version 

  docker-push-pr:
    needs: lint-and-test
    runs-on: ubuntu-latest
    # Only run for PRs from this repository (secrets are not available for forks)
    if: github.event.pull_request.head.repo.fork == false
    outputs:
      image_digest: ${{ steps.build_and_push_pr.outputs.digest }}
      image_tag: pr-${{ github.event.number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.CERIT_REGISTRY_USERNAME }}
          password: ${{ secrets.CERIT_REGISTRY_PASSWORD }}

      - name: Build and push PR image
        id: build_and_push_pr
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev-pr:
    needs: docker-push-pr
    runs-on: ubuntu-latest
    # Only run for PRs from this repository (secrets are not available for forks)
    if: github.event.pull_request.head.repo.fork == false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          KCONF='${{ secrets.K8S_CONTEXT }}'
          if echo "$KCONF" | base64 -d >/dev/null 2>&1; then
            echo "Detected base64-encoded kubeconfig"
            echo "$KCONF" | base64 -d > kubeconfig
          else
            echo "Using raw kubeconfig"
            printf "%s" "$KCONF" > kubeconfig
          fi
          echo "KUBECONFIG=$PWD/kubeconfig" >> "$GITHUB_ENV"

      - name: Prepare image reference
        run: |
          echo "IMAGE_REF=${REGISTRY}/${IMAGE_NAME}@${{ needs.docker-push-pr.outputs.image_digest }}" >> "$GITHUB_ENV"

      - name: Show current dev deployment image
        run: |
          echo "Current image:" \
            $(kubectl get deployment/mol-view-stories-dev-api -n mol-view-stories-ns \
              -o=jsonpath='{.spec.template.spec.containers[?(@.name=="mol-view-stories-dev-api-container")].image}')

      - name: Update dev deployment image to PR build
        run: |
          echo "Setting image to ${IMAGE_REF}"
          kubectl annotate deployment/mol-view-stories-dev-api -n mol-view-stories-ns \
            kubernetes.io/change-cause="PR #${{ github.event.number }} set image to ${IMAGE_REF}" --overwrite
          kubectl set image deployment/mol-view-stories-dev-api \
            mol-view-stories-dev-api-container=${IMAGE_REF} \
            -n mol-view-stories-ns

      - name: Ensure MinIO environment variables (dev)
        run: |
          kubectl set env deployment/mol-view-stories-dev-api \
            -n mol-view-stories-ns \
            -c mol-view-stories-dev-api-container \
            MINIO_ENDPOINT="${{ secrets.MINIO_DEV_URL }}" \
            MINIO_ACCESS_KEY="${{ secrets.MINIO_DEV_USERNAME }}" \
            MINIO_SECRET_KEY="${{ secrets.MINIO_DEV_PASSWORD }}" \
            MINIO_BUCKET="root"

      - name: Restart dev deployment
        run: |
          kubectl rollout restart deployment/mol-view-stories-dev-api -n mol-view-stories-ns

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/mol-view-stories-dev-api -n mol-view-stories-ns --timeout=300s

      - name: Verify dev pods and images
        run: |
          echo "New image:" \
            $(kubectl get deployment/mol-view-stories-dev-api -n mol-view-stories-ns \
              -o=jsonpath='{.spec.template.spec.containers[?(@.name=="mol-view-stories-dev-api-container")].image}')
          echo "Pods:" && kubectl get pods -n mol-view-stories-ns -l app=mol-view-stories-dev-api -o wide
          echo "ReplicaSets:" && kubectl get rs -n mol-view-stories-ns -l app=mol-view-stories-dev-api
          echo "Describe deployment:" && kubectl describe deployment/mol-view-stories-dev-api -n mol-view-stories-ns | sed -n '1,120p'
          echo "Recent events:" && kubectl get events -n mol-view-stories-ns --sort-by=.metadata.creationTimestamp | tail -n 50