name: API Production Deployment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
        type: string
      confirm_deployment:
        description: 'Confirm production deployment'
        required: true
        type: boolean
  push:
    tags:
      - 'v*'
      - 'release-*'

env:
  REGISTRY: cerit.io
  IMAGE_NAME: mol-view-stories/mvs-api

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.confirm_deployment == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git describe
      
      - name: Get release version
        id: release-version
        run: |
          # Always try to get the tag name first (for tag pushes)
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
            echo "Using tag from push event: $VERSION"
          else
            # For manual deployments, use provided image_tag or get latest tag
            if [ "${{ inputs.image_tag }}" != "latest" ]; then
              VERSION="${{ inputs.image_tag }}"
              echo "Using provided image_tag: $VERSION"
            else
              VERSION=$(git describe --abbrev=0 --tags 2>/dev/null || echo "latest")
              echo "Using latest tag from git describe: $VERSION"
            fi
          fi
          
          # Validate version format (basic check)
          if [[ -z "$VERSION" ]]; then
            echo "Warning: Version is empty, using fallback"
            VERSION="latest"
          fi
          
          # Sanitize version for Docker tags (replace slashes and other invalid chars)
          DOCKER_VERSION=$(echo "$VERSION" | sed 's/[^a-zA-Z0-9._-]/-/g')
          if [[ "$DOCKER_VERSION" != "$VERSION" ]]; then
            echo "Warning: Sanitized version for Docker: '$VERSION' -> '$DOCKER_VERSION'"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "docker_version=$DOCKER_VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          echo "Docker version: $DOCKER_VERSION"
          
          # Fail the build if we can't determine a reasonable version
          if [[ "$VERSION" == "latest" && "${{ github.event_name }}" == "push" ]]; then
            echo "Error: Could not determine version for tag push"
            exit 1
          fi

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          KCONF='${{ secrets.K8S_CONTEXT }}'
          if echo "$KCONF" | base64 -d >/dev/null 2>&1; then
            echo "Detected base64-encoded kubeconfig"
            echo "$KCONF" | base64 -d > kubeconfig
          else
            echo "Using raw kubeconfig"
            printf "%s" "$KCONF" > kubeconfig
          fi
          echo "KUBECONFIG=$PWD/kubeconfig" >> "$GITHUB_ENV"

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          
          echo "=== Production Deployment ==="
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.release-version.outputs.docker_version }}"
          echo "Namespace: mol-view-stories-ns"
          
          # Check if production deployment exists
          if kubectl get deployment/mol-view-stories-api -n mol-view-stories-ns >/dev/null 2>&1; then
            echo "Production deployment exists, updating image..."
            # Update deployment with new image
            kubectl set image deployment/mol-view-stories-api \
              mol-view-stories-api-container=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.release-version.outputs.docker_version }} \
              -n mol-view-stories-ns
            
            # Set MinIO environment variables for production
            echo "Setting MinIO environment variables for production..."
            kubectl set env deployment/mol-view-stories-api \
              -n mol-view-stories-ns \
              -c mol-view-stories-api-container \
              MINIO_ENDPOINT="${{ secrets.MINIO_PROD_URL }}" \
              MINIO_ACCESS_KEY="${{ secrets.MINIO_PROD_USERNAME }}" \
              MINIO_SECRET_KEY="${{ secrets.MINIO_PROD_PASSWORD }}" \
              MINIO_BUCKET="mol-view-stories"
            
            # Restart deployment to ensure new image is pulled
            kubectl rollout restart deployment/mol-view-stories-api -n mol-view-stories-ns
            
            # Wait for rollout to complete
            kubectl rollout status deployment/mol-view-stories-api -n mol-view-stories-ns --timeout=300s
          else
            echo "Production deployment does not exist, creating new production deployment..."
            # Create a new production deployment using the deployment file with proper image replacement
            kubectl apply -f api/deploy.yaml
            
            # Set MinIO environment variables for production
            echo "Setting MinIO environment variables for production..."
            kubectl set env deployment/mol-view-stories-api \
              -n mol-view-stories-ns \
              -c mol-view-stories-api-container \
              MINIO_ENDPOINT="${{ secrets.MINIO_PROD_URL }}" \
              MINIO_ACCESS_KEY="${{ secrets.MINIO_PROD_USERNAME }}" \
              MINIO_SECRET_KEY="${{ secrets.MINIO_PROD_PASSWORD }}" \
              MINIO_BUCKET="mol-view-stories"
            
            # Wait for rollout to complete
            kubectl rollout status deployment/mol-view-stories-api -n mol-view-stories-ns --timeout=300s
          fi
          
          echo "✓ Production deployment completed successfully"

      - name: Health check
        run: |
          export KUBECONFIG=kubeconfig
          kubectl wait --for=condition=ready pod -l deployment-id=mol-view-stories-api -n mol-view-stories-ns --timeout=300s

      - name: Verify deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n mol-view-stories-ns -l deployment-id=mol-view-stories-api
          kubectl get services -n mol-view-stories-ns -l deployment-id=mol-view-stories-api

      - name: Deployment summary
        run: |
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Version**: ${{ steps.release-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Tag**: ${{ steps.release-version.outputs.docker_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY 