# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: UI Production Deployment

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirm web deployment to GitHub Pages'
        required: true
        type: boolean
  push:
    tags:
      - 'v*'
      - 'release-*'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.confirm_deployment == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git describe

      - name: Get release version
        id: release-version
        run: |
          # Always try to get the tag name first (for tag pushes)
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
            echo "Using tag from push event: $VERSION"
          else
            # For manual deployments, try to get the latest tag
            VERSION=$(git describe --abbrev=0 --tags 2>/dev/null || echo "dev")
            echo "Using latest tag from git describe: $VERSION"
          fi

          # Validate version format (basic check)
          if [[ -z "$VERSION" ]]; then
            echo "Warning: Version is empty, using fallback"
            VERSION="dev"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            "@mol-view-stories/webapp/.next/cache"
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
      - name: Install dependencies
        run: pnpm install
      - name: Build Web
        env:
          NEXT_PUBLIC_OIDC_AUTHORITY: ${{ vars.NEXT_PUBLIC_OIDC_AUTHORITY }}
          NEXT_PUBLIC_OIDC_CLIENT_ID: ${{ vars.NEXT_PUBLIC_OIDC_CLIENT_ID }}
          NEXT_PUBLIC_APP_PREFIX: ${{ vars.NEXT_PUBLIC_APP_PREFIX }}
          NEXT_PUBLIC_RELEASE_VERSION: ${{ steps.release-version.outputs.version }}
        run: pnpm run --filter=@mol-view-stories/webapp build

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install mkdocs
        run: |
          pip install mkdocs-material

      - name: Build docs
        run: |
          cd docs
          mkdocs build

      - name: Copy docs
        run: |
          mkdir -p "@mol-view-stories/webapp/out/docs"
          cp -r ./docs/site/* "@mol-view-stories/webapp/out/docs/"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '@mol-view-stories/webapp/out'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
