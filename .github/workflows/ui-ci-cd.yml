name: UI CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'components.json'
      - 'next.config.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'postcss.config.mjs'
      - 'eslint.config.mjs'
      - 'Dockerfile'
      - 'nginx-dev.conf'
      - '.github/ui-deploy-dev.yaml'
      - '.github/workflows/ui-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'components.json'
      - 'next.config.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'postcss.config.mjs'
      - 'eslint.config.mjs'
      - 'Dockerfile'
      - 'nginx-dev.conf'
      - '.github/ui-deploy-dev.yaml'
      - '.github/workflows/ui-ci-cd.yml'

env:
  REGISTRY: cerit.io
  IMAGE_NAME: mol-view-stories/mvs-ui

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image_digest: ${{ steps.build_and_push.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: npm

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ vars.NEXT_PUBLIC_API_BASE_URL || 'https://mol-view-stories-dev.dyn.cloud.e-infra.cz' }}
        NEXT_PUBLIC_OIDC_AUTHORITY: ${{ vars.NEXT_PUBLIC_OIDC_AUTHORITY || 'https://login.aai.lifescience-ri.eu/oidc' }}
        NEXT_PUBLIC_OIDC_CLIENT_ID: ${{ vars.NEXT_PUBLIC_OIDC_CLIENT_ID || '3963b643-f862-4578-868e-3ba3de08dd2d' }}
        NEXT_PUBLIC_APP_PREFIX: ${{ vars.NEXT_PUBLIC_APP_PREFIX || 'mol-view-stories/' }}
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.CERIT_REGISTRY_USERNAME }}
        password: ${{ secrets.CERIT_REGISTRY_PASSWORD }}

    - name: Test Docker login
      run: |
        echo "=== Testing Docker login ==="
        echo "Testing docker login to ${{ env.REGISTRY }}"
        
        if docker login ${{ env.REGISTRY }} -u "${{ secrets.CERIT_REGISTRY_USERNAME }}" -p "${{ secrets.CERIT_REGISTRY_PASSWORD }}" 2>&1 | grep -q "Login Succeeded"; then
          echo "✓ Docker login successful"
        else
          echo "✗ Docker login failed"
          exit 1
        fi

    - name: Build and push Docker image
      id: build_and_push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
        build-args: |
          NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_OIDC_AUTHORITY=${{ vars.NEXT_PUBLIC_OIDC_AUTHORITY }}
          NEXT_PUBLIC_OIDC_CLIENT_ID=${{ vars.NEXT_PUBLIC_OIDC_CLIENT_ID }}
          NEXT_PUBLIC_APP_PREFIX=${{ vars.NEXT_PUBLIC_APP_PREFIX }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify pushed image
      run: |
        echo "Pushed digest: ${{ steps.build_and_push.outputs.digest }}"
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build_and_push.outputs.digest }}

    - name: PR Check Summary
      if: github.event_name == 'pull_request'
      run: |
        echo "## UI PR Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **PR Number**: #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ All checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Linting**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Type Checking**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build & Push**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tags**: pr-${{ github.event.number }}, latest, ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment**: ✅ Will deploy to development" >> $GITHUB_STEP_SUMMARY
        echo "- **Ready for merge**: ✅ Yes" >> $GITHUB_STEP_SUMMARY

  deploy-dev:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        KCONF='${{ secrets.K8S_CONTEXT }}'
        if echo "$KCONF" | base64 -d >/dev/null 2>&1; then
          echo "Detected base64-encoded kubeconfig"
          echo "$KCONF" | base64 -d > kubeconfig.yaml
        else
          echo "Using raw kubeconfig"
          printf "%s" "$KCONF" > kubeconfig.yaml
        fi
        echo "KUBECONFIG=$PWD/kubeconfig.yaml" >> "$GITHUB_ENV"

    - name: Deploy to development
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        # Set image tag based on branch or PR
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          IMAGE_TAG="pr-${{ github.event.number }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          IMAGE_TAG="latest"
        else
          IMAGE_TAG="${{ github.ref_name }}"
        fi
        
        # Use tag for PRs, digest for branches
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        else
          IMAGE_DIGEST='${{ needs.build-and-test.outputs.image_digest }}'
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${IMAGE_DIGEST}"
        fi

        # Check if development deployment exists
        if kubectl get deployment/mol-view-stories-dev-ui -n mol-view-stories-ns >/dev/null 2>&1; then
          echo "Development UI deployment exists, updating image..."
          # Update deployment with new image
          kubectl set image deployment/mol-view-stories-dev-ui \
            mol-view-stories-dev-ui-container=${IMAGE_REF} \
            -n mol-view-stories-ns
          
          # Force restart deployment to ensure new configuration is applied
          kubectl rollout restart deployment/mol-view-stories-dev-ui -n mol-view-stories-ns
          
          # Wait for rollout to complete
          kubectl rollout status deployment/mol-view-stories-dev-ui -n mol-view-stories-ns --timeout=300s
        else
          echo "Development UI deployment does not exist, creating new development deployment..."
          # Create a new development deployment
          kubectl apply -f ui-deploy-dev.yaml 
          
          # Force image to the digest we just built
          kubectl set image deployment/mol-view-stories-dev-ui \
            mol-view-stories-dev-ui-container=${IMAGE_REF} \
            -n mol-view-stories-ns
          
          # Wait for rollout to complete
          kubectl rollout status deployment/mol-view-stories-dev-ui -n mol-view-stories-ns --timeout=300s
        fi
        
        echo "✓ Development UI deployment completed successfully"

    - name: Health check
      run: |
        export KUBECONFIG=kubeconfig.yaml
        # Wait for the deployment to be ready
        kubectl wait --for=condition=available deployment/mol-view-stories-dev-ui -n mol-view-stories-ns --timeout=300s
        
        # Get the current pod name and wait for it to be ready
        POD_NAME=$(kubectl get pods -n mol-view-stories-ns -l app=mol-view-stories-dev-ui -o jsonpath='{.items[0].metadata.name}')
        echo "Waiting for pod: $POD_NAME"
        kubectl wait --for=condition=ready pod/$POD_NAME -n mol-view-stories-ns --timeout=300s

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig.yaml
        kubectl get pods -n mol-view-stories-ns -l app=mol-view-stories-dev-ui
        kubectl get services -n mol-view-stories-ns -l app=mol-view-stories-dev-ui
        kubectl get ingress -n mol-view-stories-ns -l app=mol-view-stories-dev-ui

    - name: Deployment summary
      run: |
        echo "## UI Development Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Digest**: ${{ needs.build-and-test.outputs.image_digest }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successfully deployed to development" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://mol-view-stories-ui-dev.dyn.cloud.e-infra.cz" >> $GITHUB_STEP_SUMMARY